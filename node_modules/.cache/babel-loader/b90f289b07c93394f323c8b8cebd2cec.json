{"ast":null,"code":"var _jsxFileName = \"/home/khan/Documents/Self Programming/bootcamp piaic/redux-toolkit/src/Todo.js\";\nimport React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addTask } from './Redux/counterSlice';\n\nfunction Todo() {\n  const [id, setId] = useState(0);\n  const [task, setTask] = useState('');\n  const dispatch = useDispatch();\n  const tskob = useSelector(state => {\n    return state.counter[0].tasks.filter(task => {\n      if (task.id === 0) {\n        return task;\n      } else return 'none';\n    });\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 5\n    }\n  }, \"ID IN THE BEGINNING IS \", tskob[0].name, \" \", console.log('tskOB', tskob), \" \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 75\n    }\n  }), \"Id: \", /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    onChange: e => {\n      setId(e.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 11\n    }\n  }), \"Task: \", /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    onChange: e => {\n      setTask(e.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: dispatch(addTask({\n      tid: id,\n      task: task\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default Todo;","map":{"version":3,"sources":["/home/khan/Documents/Self Programming/bootcamp piaic/redux-toolkit/src/Todo.js"],"names":["React","useState","useDispatch","useSelector","addTask","Todo","id","setId","task","setTask","dispatch","tskob","state","counter","tasks","filter","name","console","log","e","target","value","tid"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAwC,aAAxC;AACA,SAASC,OAAT,QAAwB,sBAAxB;;AAEA,SAASC,IAAT,GAAgB;AACZ,QAAM,CAACC,EAAD,EAAKC,KAAL,IAAcN,QAAQ,CAAC,CAAD,CAA5B;AACA,QAAM,CAACO,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAMS,QAAQ,GAAGR,WAAW,EAA5B;AACA,QAAMS,KAAK,GAAGR,WAAW,CAAGS,KAAD,IAAW;AAClC,WAAOA,KAAK,CAACC,OAAN,CAAc,CAAd,EAAiBC,KAAjB,CAAuBC,MAAvB,CAA8BP,IAAI,IAAI;AAC3C,UAAGA,IAAI,CAACF,EAAL,KAAY,CAAf,EAAiB;AACf,eAAOE,IAAP;AACD,OAFD,MAGM,OAAO,MAAP;AAAgB,KAJjB,CAAP;AAKH,GANwB,CAAzB;AAQF,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAC0BG,KAAK,CAAC,CAAD,CAAL,CAASK,IADnC,OAC0CC,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAoBP,KAApB,CAD1C,oBACsE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADtE,uBAEM;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,QAAQ,EAAGQ,CAAD,IAAO;AACpCZ,MAAAA,KAAK,CAACY,CAAC,CAACC,MAAF,CAASC,KAAV,CAAL;AACH,KAFG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFN,yBAMQ;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,QAAQ,EAAIF,CAAD,IAAO;AACvCV,MAAAA,OAAO,CAACU,CAAC,CAACC,MAAF,CAASC,KAAV,CAAP;AACH,KAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANR,eASE;AAAQ,IAAA,OAAO,EAAEX,QAAQ,CAACN,OAAO,CAAC;AAACkB,MAAAA,GAAG,EAAChB,EAAL;AAASE,MAAAA,IAAI,EAAEA;AAAf,KAAD,CAAR,CAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATF,CADF;AAaD;;AAED,eAAeH,IAAf","sourcesContent":["import React, { useState } from 'react'\nimport { useDispatch, useSelector} from 'react-redux'\nimport { addTask } from './Redux/counterSlice'\n\nfunction Todo() {\n    const [id, setId] = useState(0)\n    const [task, setTask] = useState('')\n    const dispatch = useDispatch()\n    const tskob = useSelector( (state) => {\n        return state.counter[0].tasks.filter(task => {\n          if(task.id === 0){\n            return task\n          } \n           else return 'none'  })\n    })\n\n  return (\n    <div>\n      ID IN THE BEGINNING IS {tskob[0].name} {console.log('tskOB',tskob)} <br/>\n      Id: <input type='text' onChange={(e) => {\n          setId(e.target.value)\n      }\n      } />\n      Task: <input type='text' onChange= {(e) => {\n          setTask(e.target.value)\n      }} />\n      <button onClick={dispatch(addTask({tid:id, task: task}))} />\n    </div>\n  )\n}\n\nexport default Todo"]},"metadata":{},"sourceType":"module"}